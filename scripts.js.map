{"version":3,"sources":["webpack:///src/assets/js/rectangleEmitter.js","webpack:///src/assets/js/snow.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,mDAAmD;AACnD,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,Q;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;CCjMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,WAAW;AACzD;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;;AAGA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH,CAAC","file":"scripts.js","sourcesContent":["const rectangleEmitter = {\n\t/**\n\t * The canvas object\n\t */\n\tcanvas: null,\n\n\t/**\n\t * CanvasContext  The canvas context object\n\t */\n\tcontext: null,\n\n\t/**\n\t * Object The blast zone for particles.\n\t */\n\tblastZone: {\n\t\tx: 0,\n\t\ty: 0,\n\t\twidth: 800,\n\t\theight: 600\n\t},\n\n\t/**\n\t * Particle The type of particle to create.\n\t */\n\tparticle: null,\n\n\t/**\n\t * array The list of particles in the emitter.\n\t */\n\tparticles: [],\n\n\t/**\n\t * The max number of particles.\n\t */\n\tmaxParticles: 700,\n\n\t/**\n\t * The intervalID for the FPS interval\n\t */\n\tfpsId: null,\n\n\t/**\n\t * The interval ID for the seconds tick.\n\t */\n\ttickId: null,\n\n\t/**\n\t * Sets the canvas object.\n\t *\n\t * @param canvas DOMCanvasElement  The canvas to draw on.\n\t */\n\tsetCanvas: function(canvas){\n\t\tthis.canvas = canvas;\n\t\tthis.context = canvas.getContext('2d');\n    this.context.fillStyle = '#ffffff';\n\t},\n\n\t/**\n\t * Sets the blast zone.\n\t *\n\t * @param x      int  The x coord\n\t * @param y      int  The y-coor\n\t * @param width  int  The width\n\t * @param height int  The height\n\t */\n\tsetBlastZone: function(x, y, width, height){\n\t\tthis.blastZone = {\n\t\t\t'x': x,\n\t\t\t'y': y,\n\t\t\t'width': width,\n\t\t\t'height': height\n\t\t};\n\t},\n\n\t/** Starts the emitter.\n\t *\n\t * @param\tfps\tThe frame rate or 30 by default\n\t */\n\tstart:function(fps){\n\t\tvar rate = fps || 30;\n\t\tthis.fpsId = setInterval(this.frameUpdate, 1000/rate, this); // Framerate update\n\t\tthis.tickId = setInterval(this.tick, 1000, this); // Every second tick...\n\t},\n\n\t/**\n\t * Pauses the emitter but doesn't clear the screen.\n\t */\n\tpause:function(){\n\t\tclearInterval(this.intervalId);\n\t},\n\n\t/**\n\t * Stops the emitter and clears the screen.\n\t */\n\tstop:function(){\n\t\tclearInterval(this.intervalId);\n\t\tthis.clear();\n\t},\n\n\t/**\n\t * Clears off the particles.\n\t */\n\tclear:function(){\n\t\tthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t},\n\n\t/**\n\t * Adds a particle to the screen.\n\t *\n\t * @param\tparticle\tThe particle to add\n\t */\n\taddParticle:function(particle){\n\t\tif (this.particles.length < this.maxParticles){\n\t\t\tvar p = Object.create(particle);\n\t\t\tp.randomize(this.blastZone);\n\n\t\t\t// Add the particle\n\t\t\tthis.particles.push(p);\n\t\t}\n\t},\n\n\t/**\n\t * Draws the whole canvas.\n\t */\n\tdraw:function(r, g, b){\n\t\tthis.clear();\n\n\t\tvar i = this.particles.length;\n\t\twhile (i--){\n\t\t\tthis.particles[i].draw(this.context, r, g, b);\n\t\t}\n\t},\n\n\t/**\n\t * Updates the particles on the screen.\n\t */\n\tupdate:function(){\n\t\tvar p; \n\t\tvar i = this.particles.length;\n\t\t\n\t\twhile(i--){\n\t\t\tp = this.particles[i];\n\t\t\tp.update();\n\n\t\t\t// Remove the particle if it is \"dead\"\n\t\t\tif (p.y > this.canvas.height){\n\t\t\t\tthis.particles.splice(i, 1);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Applies actions to all of the particles.\n\t */\n\tapplyActions:function(){\n\t\tvar i = this.particles.length;\n\t\t\n\t\twhile(i--){\n\t\t\tthis.particles[i].action();\n\t\t}\n\t},\n\n\t/**\n\t * Run the action ahead the number of seconds (so the screen isn't blank on init).\n\t *\n\t * @param seconds int  The number of seconds to run ahead.\n\t */\n\trunAhead: function(seconds){\n\t\tfor (i = 0; i < seconds; i += 1){\n\t\t\tthis.frameUpdate(this);\n\t\t}\n\t},\n\n\t/**\n\t * The FPS update\n\t *\n\t * @param\tself\tThe reference to the emitter that is lost during setInterval.\n\t */\n\tframeUpdate:function(self){\n\t\tself.addParticle(self.particle);\n\t\tself.update();\n\t\tself.draw();\n\t},\n\n\t/**\n\t * The seconds \"tick\" interval\n\t *\n\t * @param\tself\tThe reference to the emitter that is lost during setInterval.\n\t */\n\ttick:function(self){\n\t\tself.applyActions();\n\t}\n\n};\n","const snow = {\r\n  /**\r\n   * float  The current x position\r\n   */\r\n  x: 0,\r\n\r\n  /**\r\n   * float  The current y position\r\n   */\r\n  y: 0,\r\n\r\n  /**\r\n   * float  Alpha\r\n   */\r\n  alpha: 0.5,\r\n\r\n  /**\r\n   * float  The radius of the circle.\r\n   */\r\n  radius: 3,\r\n\r\n  /**\r\n   * Velocity for the particle.\r\n   */\r\n  velocity: {\r\n    x: 0,\r\n    y: 5\r\n  },\r\n\r\n  /**\r\n   * Draws the particle onto the canvas in context.\r\n   *\r\n   * @param  c   The canvas context to draw onto\r\n   */\r\n  draw: function (c, r = 255, g = 255, b = 255) {\r\n    //c.fillStyle = `rgba(${r}, ${g}, ${b}, ${this.alpha})`;\r\n    c.beginPath();\r\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);\r\n    c.fill();\r\n  },\r\n\r\n  /**\r\n   * Updates the particle.\r\n   */\r\n  update: function () {\r\n    this.x += this.velocity.x\r\n    this.y += this.velocity.y;\r\n\r\n\r\n  },\r\n\r\n  /**\r\n   * Randomizes the settings for the particle\r\n   *\r\n   * @param  zone  The blastZone\r\n   */\r\n  randomize: function (zone) {\r\n    // Get a random point inside the blastzone and set the x/y\r\n    var s = this.getLocation(zone);\r\n    this.x = s.x;\r\n    this.y = s.y;\r\n\r\n    this.alpha = this.randomRange(0.3, 1);\r\n    this.radius = this.randomRange(1, 5);\r\n\r\n    this.velocity = {\r\n      x: this.randomRange(-0.35, 0.35),\r\n      y: this.randomRange(0.75, 1.5)\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Adds a random drift type motion to the particle.\r\n   * Taken from the Flint particle system....\r\n   */\r\n  action: function () {\r\n    this.velocity.x += (Math.random() - 0.5) * 0.1;\r\n  },\r\n\r\n  /**\r\n   * Take a low and high number and gets a random number between them.\r\n   *\r\n   * @param  low    The low number\r\n   * @param  high  The high number\r\n   * @return  Number\r\n   */\r\n  randomRange: function (low, high) {\r\n    return (Math.random() * (high - low)) + low;\r\n  },\r\n\r\n  /**\r\n   * Gets a random starting point for the particle.\r\n   * Taken from the Flint particle system in AS3\r\n   *\r\n   * @param  zone  The zone to get a location from\r\n   * @return  Object\r\n   */\r\n  getLocation: function (z) {\r\n    var p = {};\r\n    p.x = z.x + Math.random() * z.width;\r\n    p.y = z.y + Math.random() * z.height;\r\n    return p;\r\n  }\r\n};\r\n(function () {\r\n\r\n  function init() {\r\n    letItSnow();\r\n    // setMainStream();\r\n  }\r\n\r\n  function letItSnow() {\r\n    console.log(document.readyState);\r\n    // https://github.com/daveWid/canvas-snow\r\n    const canvas = document.getElementById(\"snow\");\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    // Now the emitter\r\n    const emitter = Object.create(rectangleEmitter);\r\n    emitter.setCanvas(canvas);\r\n    emitter.setBlastZone(0, -10, canvas.width, 1);\r\n    emitter.particle = snow;\r\n    emitter.runAhead(0);\r\n    emitter.start(60);\r\n  }\r\n\r\n  let stateCheck = setInterval(() => {\r\n    if (document.readyState === 'complete') {\r\n      clearInterval(stateCheck);\r\n      // document ready\r\n      init();\r\n    }\r\n  }, 100);\r\n\r\n\r\n})();\r\n\r\n"],"sourceRoot":""}